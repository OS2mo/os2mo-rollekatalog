# SPDX-FileCopyrightText: Magenta ApS <https://magenta.dk>
# SPDX-License-Identifier: MPL-2.0


query GetTitles {
  classes(filter: {facet: {user_keys:"engagement_job_function"}}) {
    objects {
      current {
        user_key
        uuid
      }
    }
  }
}


query GetPerson(
  $employee_uuid: UUID!
  $root_uuid: UUID!
  $ad_itsystem_user_key: String!
  $fk_itsystem_user_key: String!
  $now: DateTime!
) {
  employees(
    filter: { uuids: [$employee_uuid], from_date: $now, to_date: null }
  ) {
    objects {
      current {
        uuid
        user_key
        nickname
        name
        addresses(
          filter: {
            address_type: { scope: "EMAIL" }
            from_date: $now
            to_date: null
          }
        ) {
          uuid
          value
        }
        itusers(
          filter: {
            itsystem: { user_keys: [$ad_itsystem_user_key, $fk_itsystem_user_key] }
            from_date: $now
            to_date: null
          }
        ) {
          uuid
          user_key
          external_id
          itsystem {
            user_key
          }
          validity {
            from
            to
          }
          engagements(filter: { from_date: $now, to_date: null }) {
            current {
              org_unit(
                filter: {
                  ancestor: { uuids: [$root_uuid] }
                  from_date: $now
                  to_date: null
                }
              ) {
                uuid
                validity {
                  from
                  to
                }
              }
              job_function {
                name
                uuid
              }
            }
          }
        }
      }
    }
  }
}


query GetUuidsForItUser($uuid: UUID!) {
  itusers(filter: {uuids: [$uuid]}) {
    objects {
      validities(start: null, end: null) {
        person {
          uuid
          engagements {
            org_unit_uuid
          }
        }
      }
    }
  }
}


query GetPersonUuidForAddress($uuid: UUID!) {
  addresses(filter: {uuids: [$uuid], from_date: null, to_date: null}) {
    objects {
      validities {
        employee_uuid
      }
    }
  }
}


query GetPersonUuidForEngagement($uuid: UUID!) {
  engagements(filter: {uuids: [$uuid], from_date: null, to_date: null}) {
    objects {
      validities {
        employee_uuid
      }
    }
  }
}


query GetOrgUnit(
  $uuid: UUID!
  $root_uuid: UUID!
  $ad_itsystem_user_key: String!
  $fk_itsystem_user_key: String!
  $now: DateTime!
) {
  org_units(
    filter: {
      uuids: [$uuid]
      ancestor: { uuids: [$root_uuid] }
      from_date: $now
      to_date: null
    }
  ) {
    objects {
      current {
        uuid
        name
        parent {
          uuid
        }
        managers(filter: {from_date: $now, to_date: null}){
          person(filter: {from_date: $now, to_date: null}){
            uuid
            itusers(filter: { itsystem: { user_keys: [$ad_itsystem_user_key, $fk_itsystem_user_key] }, from_date: $now, to_date: null}) {
              uuid
              user_key
              external_id
              itsystem {
                user_key
              }
              validity {
                from
                to
              }
              engagements(filter: { org_unit: {uuids: $uuid}}, from_date: $now, to_date: null }) {
                current {
                  org_unit(
                    filter: {
                      from_date: $now
                      to_date: null
                    }
                  ) {
                      uuid
                  }
                }
              }
            }
          }
        }
        kles(filter: {from_date: $now, to_date: null}){
          kle_number {
            user_key
          }
          kle_aspects {
            scope
          }
        }
      }
    }
  }
}


query GetOrgUnitUuidForKle($uuid: UUID!) {
  kles(filter: {uuids: [$uuid], from_date: null, to_date: null}) {
    objects {
      validities {
        org_unit_uuid
      }
    }
  }
}


query GetOrgUnitUuidForManager($uuid: UUID!) {
  managers(filter: {uuids: [$uuid], from_date: null, to_date: null}) {
    objects {
      validities {
        org_unit_uuid
      }
    }
  }
}


query _Testing_GetOrgUnitType {
  classes(filter: {facet_user_keys: "org_unit_type"}) {
    objects {
      uuid
    }
  }
}

query _Testing_GetManagerLevel {
  classes(filter: {facet_user_keys: "manager_level"}) {
    objects {
      uuid
    }
  }
}


query _Testing_GetManagerType {
  classes(filter: {facet_user_keys: "manager_type"}) {
    objects {
      uuid
    }
  }
}

query _Testing_GetManagerResponsibility {
  classes(filter: {facet_user_keys: "responsibility"}) {
    objects {
      uuid
    }
  }
}


mutation _Testing_CreateOrgUnitRoot($name: String!, $root_uuid: UUID!, $org_unit_type: UUID!) {
  org_unit_create(
    input: {
      uuid: $root_uuid,
      name: $name,
      org_unit_type: $org_unit_type,
      validity: {from: "2010-02-03"},
    },
  ) {
    uuid
  }
}


mutation _Testing_CreateOrgUnit($name: String!, $parent: UUID!, $org_unit_type: UUID!) {
  org_unit_create(
    input: {
      name: $name,
      parent: $parent,
      org_unit_type: $org_unit_type,
      validity: {from: "2010-02-03"},
    },
  ) {
    uuid
  }
}


mutation _Testing_RenameOrgUnit($uuid: UUID!, $name: String!) {
  org_unit_update(input: {uuid: $uuid, validity: {from: "2013-05-05"}, name: $name}) {
    uuid
  }
}


mutation _Testing_CreateEmployee($first_name: String!, $last_name: String!) {
  employee_create(input: {given_name: $first_name, surname: $last_name}) {
    uuid
  }
}


mutation _Testing_CreateItSystem($name: String!) {
  itsystem_create(input: {user_key: $name, name: $name, validity: {from: "2014-02-01"}}) {
    uuid
  }
}


mutation _Testing_CreateItUser($uuid: UUID, $itsystem: UUID!, $external_id: String!, $person: UUID!, $name: String!, $engagements: [UUID!], $from: DateTime = "2025-02-08") {
  ituser_create(input: {uuid: $uuid, user_key: $name, external_id: $external_id, itsystem: $itsystem, person: $person, engagements: $engagements, validity: {from: $from}}) {
    uuid
  }
}

mutation _Testing_UpdateItUser($uuid: UUID!, $from: DateTime!) {
  ituser_update(input: {uuid: $uuid, user_key: "Updated name", validity: {from: $from}}) {
    uuid
  }
}

mutation _Testing_UpdateItUserEngagements($uuid: UUID!, $engagements: [UUID!] $from: DateTime!) {
  ituser_update(input: {uuid: $uuid, validity: {from: $from}, engagements: $engagements}) {
    uuid
  }
}

mutation _Testing_CreateEngagement($orgunit: UUID!, $person: UUID!, $engagement_type: UUID!, $job_function: UUID!) {
  engagement_create(
    input: {org_unit: $orgunit, engagement_type: $engagement_type, job_function: $job_function, person: $person, validity: {from: "2016-05-05"}}
  ) {
    uuid
  }
}

mutation _Testing_CreateManager(
  $orgunit: UUID!
  $person: UUID!
  $manager_level: UUID!
  $manager_type: UUID!
  $responsibility: UUID!
  $from: DateTime = "2016-05-05"
  $to: DateTime = null
) {
  manager_create(
    input: {
      org_unit: $orgunit
      manager_level: $manager_level
      manager_type: $manager_type
      responsibility: [$responsibility]
      person: $person
      validity: { from: $from, to: $to }
    }
  ) {
    uuid
  }
}


query _Testing_GetEngagementType {
  facets(filter: {user_keys: "engagement_type"}) {
    objects {
      current {
        classes {
          uuid
        }
      }
    }
  }
}


query _Testing_GetJobFunction {
  facets(filter: {user_keys: "engagement_job_function"}) {
    objects {
      current {
        classes {
          uuid
          user_key
        }
      }
    }
  }
}


mutation _Testing_MoveOrgUnitToRoot($uuid: UUID!) {
  org_unit_update(input: {uuid: $uuid, validity: {from: "2020-05-08"}, parent: null}) {
    uuid
  }
}

mutation RefreshAll($exchange: String!, $root_uuid: UUID!) {
  employee_refresh(exchange: $exchange) {
    objects
  }
  org_unit_refresh(
    exchange: $exchange
    filter: { ancestor: { uuids: [$root_uuid] } }
  ) {
    objects
  }
  class_refresh(
    exchange: $exchange
    limit: 1
    filter: { facet: { user_keys: "engagement_job_function" } }
  ) {
    objects
  }
}
