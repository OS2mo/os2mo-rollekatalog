# Generated by ariadne-codegen on 2024-06-19 11:12
# Source: queries.graphql

from datetime import datetime
from uuid import UUID

from .async_base_client import AsyncBaseClient
from .get_org_unit import GetOrgUnit
from .get_org_unit_uuid_for_kle import GetOrgUnitUuidForKle, GetOrgUnitUuidForKleKles
from .get_org_unit_uuid_for_manager import (
    GetOrgUnitUuidForManager,
    GetOrgUnitUuidForManagerManagers,
)
from .get_person import GetPerson
from .get_person_uuid_for_address import (
    GetPersonUuidForAddress,
    GetPersonUuidForAddressAddresses,
)
from .get_person_uuid_for_engagement import (
    GetPersonUuidForEngagement,
    GetPersonUuidForEngagementEngagements,
)
from .get_titles import GetTitles, GetTitlesClasses
from .get_uuids_for_it_user import GetUuidsForItUser, GetUuidsForItUserItusers
from .get_version import GetVersion, GetVersionVersion


def gql(q: str) -> str:
    return q


class GraphQLClient(AsyncBaseClient):
    async def get_version(self) -> GetVersionVersion:
        query = gql(
            """
            query GetVersion {
              version {
                mo_version
              }
            }
            """
        )
        variables: dict[str, object] = {}
        response = await self.execute(query=query, variables=variables)
        data = self.get_data(response)
        return GetVersion.parse_obj(data).version

    async def get_titles(self) -> GetTitlesClasses:
        query = gql(
            """
            query GetTitles {
              classes(filter: {facet: {user_keys: "engagement_job_function"}}) {
                objects {
                  current {
                    user_key
                    uuid
                  }
                }
              }
            }
            """
        )
        variables: dict[str, object] = {}
        response = await self.execute(query=query, variables=variables)
        data = self.get_data(response)
        return GetTitles.parse_obj(data).classes

    async def get_person(
        self, itsystem_user_key: str, now: datetime, employee_uuid: UUID
    ) -> GetPerson:
        query = gql(
            """
            query GetPerson($itsystem_user_key: String!, $now: DateTime!, $employee_uuid: UUID!) {
              employees(filter: {uuids: [$employee_uuid]}) {
                objects {
                  current {
                    uuid
                    user_key
                    nickname
                    name
                  }
                }
              }
              addresses(
                filter: {employee: {uuids: [$employee_uuid]}, address_type: {scope: "EMAIL"}, to_date: null}
              ) {
                objects {
                  validities(start: $now, end: null) {
                    uuid
                    value
                  }
                }
              }
              itusers(
                filter: {employee: {uuids: [$employee_uuid]}, itsystem: {user_keys: [$itsystem_user_key]}, to_date: null}
              ) {
                objects {
                  validities(start: $now, end: null) {
                    user_key
                  }
                }
              }
              engagements(filter: {employee: {uuids: [$employee_uuid]}, to_date: null}) {
                objects {
                  validities(start: $now, end: null) {
                    org_unit {
                      uuid
                      ancestors {
                        uuid
                      }
                    }
                    job_function {
                      name
                      uuid
                    }
                  }
                }
              }
            }
            """
        )
        variables: dict[str, object] = {
            "itsystem_user_key": itsystem_user_key,
            "now": now,
            "employee_uuid": employee_uuid,
        }
        response = await self.execute(query=query, variables=variables)
        data = self.get_data(response)
        return GetPerson.parse_obj(data)

    async def get_uuids_for_it_user(self, uuid: UUID) -> GetUuidsForItUserItusers:
        query = gql(
            """
            query GetUuidsForItUser($uuid: UUID!) {
              itusers(filter: {uuids: [$uuid]}) {
                objects {
                  validities(start: null, end: null) {
                    person {
                      uuid
                      engagements {
                        org_unit_uuid
                      }
                    }
                  }
                }
              }
            }
            """
        )
        variables: dict[str, object] = {"uuid": uuid}
        response = await self.execute(query=query, variables=variables)
        data = self.get_data(response)
        return GetUuidsForItUser.parse_obj(data).itusers

    async def get_person_uuid_for_address(
        self, uuid: UUID
    ) -> GetPersonUuidForAddressAddresses:
        query = gql(
            """
            query GetPersonUuidForAddress($uuid: UUID!) {
              addresses(filter: {uuids: [$uuid], from_date: null, to_date: null}) {
                objects {
                  validities {
                    employee_uuid
                  }
                }
              }
            }
            """
        )
        variables: dict[str, object] = {"uuid": uuid}
        response = await self.execute(query=query, variables=variables)
        data = self.get_data(response)
        return GetPersonUuidForAddress.parse_obj(data).addresses

    async def get_person_uuid_for_engagement(
        self, uuid: UUID
    ) -> GetPersonUuidForEngagementEngagements:
        query = gql(
            """
            query GetPersonUuidForEngagement($uuid: UUID!) {
              engagements(filter: {uuids: [$uuid], from_date: null, to_date: null}) {
                objects {
                  validities {
                    employee_uuid
                  }
                }
              }
            }
            """
        )
        variables: dict[str, object] = {"uuid": uuid}
        response = await self.execute(query=query, variables=variables)
        data = self.get_data(response)
        return GetPersonUuidForEngagement.parse_obj(data).engagements

    async def get_org_unit(
        self, itsystem_user_key: str, now: datetime, uuid: UUID
    ) -> GetOrgUnit:
        query = gql(
            """
            query GetOrgUnit($itsystem_user_key: String!, $now: DateTime!, $uuid: UUID!) {
              org_units(filter: {uuids: [$uuid]}) {
                objects {
                  current {
                    uuid
                    name
                    parent {
                      uuid
                    }
                    ancestors {
                      uuid
                    }
                  }
                }
              }
              managers(filter: {org_unit: {uuids: [$uuid]}}) {
                objects {
                  validities(start: $now, end: null) {
                    person {
                      uuid
                      itusers(filter: {itsystem: {user_keys: [$itsystem_user_key]}}) {
                        user_key
                      }
                    }
                  }
                }
              }
              kles(filter: {org_unit: {uuids: [$uuid]}}) {
                objects {
                  validities(start: $now, end: null) {
                    kle_number {
                      user_key
                    }
                    kle_aspects {
                      scope
                    }
                  }
                }
              }
            }
            """
        )
        variables: dict[str, object] = {
            "itsystem_user_key": itsystem_user_key,
            "now": now,
            "uuid": uuid,
        }
        response = await self.execute(query=query, variables=variables)
        data = self.get_data(response)
        return GetOrgUnit.parse_obj(data)

    async def get_org_unit_uuid_for_kle(self, uuid: UUID) -> GetOrgUnitUuidForKleKles:
        query = gql(
            """
            query GetOrgUnitUuidForKle($uuid: UUID!) {
              kles(filter: {uuids: [$uuid], from_date: null, to_date: null}) {
                objects {
                  validities {
                    org_unit_uuid
                  }
                }
              }
            }
            """
        )
        variables: dict[str, object] = {"uuid": uuid}
        response = await self.execute(query=query, variables=variables)
        data = self.get_data(response)
        return GetOrgUnitUuidForKle.parse_obj(data).kles

    async def get_org_unit_uuid_for_manager(
        self, uuid: UUID
    ) -> GetOrgUnitUuidForManagerManagers:
        query = gql(
            """
            query GetOrgUnitUuidForManager($uuid: UUID!) {
              managers(filter: {uuids: [$uuid], from_date: null, to_date: null}) {
                objects {
                  validities {
                    org_unit_uuid
                  }
                }
              }
            }
            """
        )
        variables: dict[str, object] = {"uuid": uuid}
        response = await self.execute(query=query, variables=variables)
        data = self.get_data(response)
        return GetOrgUnitUuidForManager.parse_obj(data).managers
