# SPDX-FileCopyrightText: Magenta ApS <https://magenta.dk>
# SPDX-License-Identifier: MPL-2.0
from uuid import UUID

import pytest
from fastramqpi.pytest_util import retry
from httpx import AsyncClient

from os2mo_rollekatalog.autogenerated_graphql_client import GraphQLClient


@pytest.mark.integration_test
async def test_dummy() -> None:
    return


@pytest.mark.integration_test
async def test_too_much(
    test_client: AsyncClient,
    graphql_client: GraphQLClient,
    root_uuid: UUID,
) -> None:
    # Create org hierarchy
    org_unit_type_uuid = (
        (await graphql_client._testing__get_org_unit_type()).objects[0].uuid
    )
    await graphql_client._testing__create_org_unit_root(
        root_uuid=root_uuid,
        name="Root",
        org_unit_type=org_unit_type_uuid,
    )
    layer1_1 = (
        await graphql_client._testing__create_org_unit(
            name="Layer 1 - Unit 1",
            parent=root_uuid,
            org_unit_type=org_unit_type_uuid,
        )
    ).uuid
    layer1_2 = (
        await graphql_client._testing__create_org_unit(
            name="Layer 1 - Unit 2",
            parent=root_uuid,
            org_unit_type=org_unit_type_uuid,
        )
    ).uuid
    layer2_1 = (
        await graphql_client._testing__create_org_unit(
            name="Layer 2 - Unit 1",
            parent=layer1_2,
            org_unit_type=org_unit_type_uuid,
        )
    ).uuid
    layer3_1 = (
        await graphql_client._testing__create_org_unit(
            name="Layer 3 - Unit 1",
            parent=layer2_1,
            org_unit_type=org_unit_type_uuid,
        )
    ).uuid

    @retry()
    async def validate_hierarchy() -> None:
        assert (await test_client.get(f"/cache/org_unit/{root_uuid}")).json() == {
            "uuid": str(root_uuid),
            "name": "Root",
            "parentOrgUnitUuid": None,
            "manager": None,
            "klePerforming": [],
            "kleInterest": [],
        }
        assert (await test_client.get(f"/cache/org_unit/{layer1_1}")).json() == {
            "uuid": str(layer1_1),
            "name": "Layer 1 - Unit 1",
            "parentOrgUnitUuid": str(root_uuid),
            "manager": None,
            "klePerforming": [],
            "kleInterest": [],
        }
        assert (await test_client.get(f"/cache/org_unit/{layer1_2}")).json() == {
            "uuid": str(layer1_2),
            "name": "Layer 1 - Unit 2",
            "parentOrgUnitUuid": str(root_uuid),
            "manager": None,
            "klePerforming": [],
            "kleInterest": [],
        }
        assert (await test_client.get(f"/cache/org_unit/{layer2_1}")).json() == {
            "uuid": str(layer2_1),
            "name": "Layer 2 - Unit 1",
            "parentOrgUnitUuid": str(layer1_2),
            "manager": None,
            "klePerforming": [],
            "kleInterest": [],
        }
        assert (await test_client.get(f"/cache/org_unit/{layer3_1}")).json() == {
            "uuid": str(layer3_1),
            "name": "Layer 3 - Unit 1",
            "parentOrgUnitUuid": str(layer2_1),
            "manager": None,
            "klePerforming": [],
            "kleInterest": [],
        }

    await validate_hierarchy()

    await graphql_client._testing__rename_org_unit(layer1_1, "New Name")

    @retry()
    async def observe_name_change() -> None:
        assert (await test_client.get(f"/cache/org_unit/{layer1_1}")).json() == {
            "uuid": str(layer1_1),
            "name": "New Name",
            "parentOrgUnitUuid": str(root_uuid),
            "manager": None,
            "klePerforming": [],
            "kleInterest": [],
        }

    await observe_name_change()

    # Create employees
    anders_and = (
        await graphql_client._testing__create_employee(
            first_name="Anders",
            last_name="And",
        )
    ).uuid
    fedtmule = (
        await graphql_client._testing__create_employee(
            first_name="Fedt",
            last_name="mule",
        )
    ).uuid
    joakim = (
        await graphql_client._testing__create_employee(
            first_name="Joakim",
            last_name="von And",
        )
    ).uuid
    user_without_sam_account = (
        await graphql_client._testing__create_employee(
            first_name="Sam",
            last_name="Mangler",
        )
    ).uuid

    # Create Active Directory IT system and users
    AD = (await graphql_client._testing__create_it_system("Active Directory")).uuid
    await graphql_client._testing__create_it_user(AD, anders_and, "AA")
    await graphql_client._testing__create_it_user(AD, fedtmule, "FM")
    await graphql_client._testing__create_it_user(AD, joakim, "JvA")

    # Create engagements ("positions"). Note that Joakim does not work.
    engagement_type = (
        (await graphql_client._testing__get_engagement_type())
        .objects[0]
        .current.classes[0]  # type: ignore
        .uuid
    )
    job_function = (
        (await graphql_client._testing__get_job_function())
        .objects[0]
        .current.classes[0]  # type: ignore
    )
    await graphql_client._testing__create_engagement(
        layer1_2, anders_and, engagement_type, job_function.uuid
    )
    await graphql_client._testing__create_engagement(
        layer3_1, fedtmule, engagement_type, job_function.uuid
    )
    await graphql_client._testing__create_engagement(
        layer2_1, user_without_sam_account, engagement_type, job_function.uuid
    )

    @retry()
    async def verify_users() -> None:
        assert (await test_client.get(f"/debug/person/{joakim}")).json() == {
            "error": "User has no valid positions (engagements)"
        }
        assert (
            await test_client.get(f"/debug/person/{user_without_sam_account}")
        ).json() == {"error": "No SAM Account"}

        assert (await test_client.get(f"/cache/person/{joakim}")).json() == []
        assert (await test_client.get(f"/cache/person/{anders_and}")).json() == [
            {
                "extUuid": str(anders_and),
                "userId": "AA",
                "name": "Anders And",
                "email": None,
                "positions": [
                    {"name": job_function.user_key, "orgUnitUuid": str(layer1_2)}
                ],
            }
        ]
        assert (await test_client.get(f"/cache/person/{fedtmule}")).json() == [
            {
                "extUuid": str(fedtmule),
                "userId": "FM",
                "name": "Fedt mule",
                "email": None,
                "positions": [
                    {"name": job_function.user_key, "orgUnitUuid": str(layer3_1)}
                ],
            }
        ]

    await verify_users()

    # Move org out of synced tree. This should also remove our users from cache
    await graphql_client._testing__move_org_unit_to_root(layer1_2)

    @retry()
    async def verify_removal() -> None:
        assert (await test_client.get(f"/cache/person/{joakim}")).json() == []
        assert (await test_client.get(f"/cache/person/{anders_and}")).json() == []
        assert (await test_client.get(f"/cache/person/{fedtmule}")).json() == []
        assert (await test_client.get(f"/cache/org_unit/{layer1_2}")).json() is None
        assert (await test_client.get(f"/cache/org_unit/{layer2_1}")).json() is None
        assert (await test_client.get(f"/cache/org_unit/{layer3_1}")).json() is None

    await verify_removal()
